/**
 * üöÄ AUTOMATIZACI√ìN FAESIGN - VERSI√ìN FUNCIONAL
 * =============================================
 * 
 * Pruebas automatizadas estables para aplicaci√≥n real FAESign
 * Probado y funcionando con localhost:5173
 */

import { test, expect } from '@playwright/test';
import { 
  waitForVisualStability, 
  FAESIGN_REAL_URLS,
  VISUAL_CONFIG 
} from '../../helpers/visualTestHelpers.js';

// Configuraci√≥n base
const BASE_URL = 'http://localhost:5173';
const VIEWPORTS = {
  mobile: { width: 375, height: 667 },
  tablet: { width: 768, height: 1024 },
  desktop: { width: 1280, height: 720 }
};

test.describe('üöÄ AUTOMATIZACI√ìN FAESIGN - APLICACI√ìN REAL', () => {

  test.beforeEach(async ({ page }) => {
    console.log('\nüéØ INICIANDO PRUEBA DE APLICACI√ìN REAL FAESIGN');
    console.log('======================================================================');
    console.log(`üåê URL Base: ${BASE_URL}/`);
    console.log('üö´ NO usa Storybook - Solo aplicaci√≥n real');
    console.log('üì± Viewports: mobile, tablet, desktop');
    console.log('üåç Navegador: Chromium');
    
    // Validar que la aplicaci√≥n est√© corriendo
    try {
      await page.goto(BASE_URL, { waitUntil: 'networkidle' });
      const title = await page.title();
      console.log(`‚úÖ Aplicaci√≥n real detectada: "${title}"`);
    } catch (error) {
      console.log('‚ùå ERROR: Aplicaci√≥n no disponible en puerto 5173');
      throw new Error('Aplicaci√≥n FAESign no est√° corriendo en localhost:5173');
    }
  });

  test('üè† Landing Page - Validaci√≥n Real', async ({ page }) => {
    console.log('\nüîç Iniciando validaci√≥n de landing page...');
    
    await page.goto(BASE_URL);
    await waitForVisualStability(page);
    
    // Verificar que la p√°gina principal carg√≥
    const title = await page.title();
    expect(title).toContain('FAESign');
    console.log(`üìÑ T√≠tulo detectado: "${title}"`);
    
    // Verificar contenido b√°sico
    const bodyText = await page.textContent('body');
    const hasContent = bodyText && bodyText.length > 100;
    expect(hasContent).toBeTruthy();
    console.log(`üìù Contenido detectado: ${bodyText?.length || 0} caracteres`);
    
    // Screenshot de la p√°gina real
    await expect(page).toHaveScreenshot('landing-page-real.png', {
      fullPage: true,
      animations: 'disabled'
    });
    
    console.log('‚úÖ Landing page validada correctamente');
  });

  test('üì± Responsividad Mobile - Aplicaci√≥n Real', async ({ page }) => {
    console.log('\nüì± Probando responsividad m√≥vil...');
    
    // Configurar viewport m√≥vil
    await page.setViewportSize(VIEWPORTS.mobile);
    await page.goto(BASE_URL);
    await waitForVisualStability(page);
    
    // Analizar elementos en m√≥vil
    const mobileAnalysis = await page.evaluate(() => {
      const buttons = document.querySelectorAll('button').length;
      const links = document.querySelectorAll('a').length;
      const inputs = document.querySelectorAll('input').length;
      return { buttons, links, inputs };
    });
    
    console.log(`üìä Elementos m√≥viles - Buttons: ${mobileAnalysis.buttons}, Links: ${mobileAnalysis.links}, Inputs: ${mobileAnalysis.inputs}`);
    
    // Screenshot m√≥vil
    await expect(page).toHaveScreenshot('mobile-view-real.png', {
      animations: 'disabled'
    });
    
    console.log('‚úÖ Vista m√≥vil capturada y analizada');
  });

  test('üñ•Ô∏è Responsividad Desktop - Aplicaci√≥n Real', async ({ page }) => {
    console.log('\nüñ•Ô∏è Probando responsividad desktop...');
    
    // Configurar viewport desktop
    await page.setViewportSize(VIEWPORTS.desktop);
    await page.goto(BASE_URL);
    await waitForVisualStability(page);
    
    // Analizar elementos en desktop
    const desktopAnalysis = await page.evaluate(() => {
      const headers = document.querySelectorAll('h1, h2, h3, h4, h5, h6').length;
      const nav = document.querySelectorAll('nav').length;
      const forms = document.querySelectorAll('form').length;
      return { headers, nav, forms };
    });
    
    console.log(`üìä Elementos desktop - Headers: ${desktopAnalysis.headers}, Nav: ${desktopAnalysis.nav}, Forms: ${desktopAnalysis.forms}`);
    
    // Screenshot desktop
    await expect(page).toHaveScreenshot('desktop-view-real.png', {
      animations: 'disabled'
    });
    
    console.log('‚úÖ Vista desktop capturada y analizada');
  });

  test('‚ö° Performance - Aplicaci√≥n Real', async ({ page }) => {
    console.log('\n‚ö° Midiendo performance de aplicaci√≥n real...');
    
    const startTime = Date.now();
    
    // Navegar y medir tiempo de carga
    await page.goto(BASE_URL, { waitUntil: 'networkidle' });
    await waitForVisualStability(page);
    
    const loadTime = Date.now() - startTime;
    console.log(`üöÄ Tiempo de carga: ${loadTime}ms`);
    
    // Validar que carg√≥ en tiempo razonable
    expect(loadTime).toBeLessThan(10000); // Menos de 10 segundos
    
    // An√°lisis de recursos
    const resourceAnalysis = await page.evaluate(() => {
      const images = document.querySelectorAll('img').length;
      const scripts = document.querySelectorAll('script').length;
      const links = document.querySelectorAll('link').length;
      return { images, scripts, links };
    });
    
    console.log(`üìä Recursos cargados - Images: ${resourceAnalysis.images}, Scripts: ${resourceAnalysis.scripts}, Links: ${resourceAnalysis.links}`);
    console.log(`‚úÖ Performance medida: ${loadTime}ms`);
  });

  test('üîç Estructura de Aplicaci√≥n - An√°lisis Real', async ({ page }) => {
    console.log('\nüîç Analizando estructura de la aplicaci√≥n...');
    
    await page.goto(BASE_URL);
    await waitForVisualStability(page);
    
    // An√°lisis completo de la estructura
    const structureAnalysis = await page.evaluate(() => {
      const analysis = {
        rootElements: document.querySelectorAll('#root, #app, .app, main').length,
        containers: document.querySelectorAll('.container, .wrapper, .content').length,
        buttons: document.querySelectorAll('button').length,
        inputs: document.querySelectorAll('input, textarea, select').length,
        links: document.querySelectorAll('a').length,
        forms: document.querySelectorAll('form').length,
        images: document.querySelectorAll('img').length
      };
      return analysis;
    });
    
    console.log('üìä An√°lisis de estructura:');
    Object.entries(structureAnalysis).forEach(([key, value]) => {
      console.log(`   ${key}: ${value}`);
    });
    
    // Verificar que tiene estructura m√≠nima
    expect(structureAnalysis.rootElements + structureAnalysis.containers).toBeGreaterThan(0);
    
    console.log('‚úÖ Estructura analizada correctamente');
  });

  test('üì∏ Screenshots Comparativos - M√∫ltiples Viewports', async ({ page }) => {
    console.log('\nüì∏ Capturando screenshots comparativos...');
    
    for (const [viewportName, viewport] of Object.entries(VIEWPORTS)) {
      console.log(`üì± Capturando vista ${viewportName} (${viewport.width}x${viewport.height})`);
      
      await page.setViewportSize(viewport);
      await page.goto(BASE_URL);
      await waitForVisualStability(page);
      
      // Screenshot espec√≠fico por viewport
      await expect(page).toHaveScreenshot(`faesign-${viewportName}-real.png`, {
        fullPage: true,
        animations: 'disabled'
      });
    }
    
    console.log('‚úÖ Screenshots comparativos completados');
  });

});

test.describe('üéØ VALIDACI√ìN FINAL - APLICACI√ìN REAL', () => {
  
  test('üîó Interacciones B√°sicas - Aplicaci√≥n Real', async ({ page }) => {
    console.log('\nüîó Probando interacciones b√°sicas...');
    
    await page.goto(BASE_URL);
    await waitForVisualStability(page);
    
    // Buscar elementos interactivos
    const buttons = await page.locator('button').all();
    const links = await page.locator('a').all();
    
    console.log(`üéØ Encontrados ${buttons.length} botones y ${links.length} enlaces`);
    
    // Probar hover en primer bot√≥n si existe
    if (buttons.length > 0) {
      await buttons[0].hover();
      console.log('‚úÖ Interacci√≥n hover exitosa');
    }
    
    // Screenshot final
    await expect(page).toHaveScreenshot('interactions-real.png', {
      animations: 'disabled'
    });
    
    console.log('‚úÖ Interacciones b√°sicas validadas');
  });

  test.afterEach(async ({ page }, testInfo) => {
    console.log('\nüìà REPORTE FINAL - APLICACI√ìN REAL FAESIGN');
    console.log('======================================================================');
    
    if (testInfo.status === 'passed') {
      console.log('üéâ PRUEBA COMPLETADA CON √âXITO');
    } else {
      console.log('‚ùå Prueba fall√≥ - revisar logs');
    }
    
    console.log('======================================================================');
  });

});
